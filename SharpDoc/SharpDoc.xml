<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDoc</name>
    </assembly>
    <members>
        <member name="T:SharpDoc.AssemblyDoc">
            <summary>
            SharpDoc is a tool to generate documentation for .Net assemblies. <a href="http://sharpdx.org">Go to SharpDX!</a>.
            </summary>
        </member>
        <member name="T:SharpDoc.ConfigDocPak">
            <summary>
            Configuration for doc pak viewer.
            </summary>
        </member>
        <member name="M:SharpDoc.ConfigDocPak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.ConfigDocPak"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.ConfigDocPak.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.ConfigDocPak.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="T:SharpDoc.Logging.ConsoleLogger">
            <summary>
            Default logger to Console.Out.
            </summary>
        </member>
        <member name="T:SharpDoc.Logging.LoggerBase">
            <summary>
            <see cref="T:SharpDoc.Logging.ILogger"/> base implementation.
            </summary>
        </member>
        <member name="T:SharpDoc.Logging.ILogger">
            <summary>
            Logging interface for backend output.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.ILogger.Exit(System.String,System.Int32)">
            <summary>
            Exits the process with the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="exitCode">The exit code</param>
        </member>
        <member name="M:SharpDoc.Logging.ILogger.Log(SharpDoc.Logging.LogLevel,SharpDoc.Logging.LogLocation,System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Logs the specified log message.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="logLocation">The log location.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.LoggerBase.Exit(System.String,System.Int32)">
            <summary>
            Exits the process with the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="exitCode">The exit code</param>
        </member>
        <member name="M:SharpDoc.Logging.LoggerBase.Log(SharpDoc.Logging.LogLevel,SharpDoc.Logging.LogLocation,System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Logs the specified log message.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="logLocation">The log location.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.LoggerBase.FormatMessage(SharpDoc.Logging.LogLevel,SharpDoc.Logging.LogLocation,System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Formats the message.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="logLocation">The log location.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Logging.LoggerBase.FormatMessage(System.String,System.String,System.Object[])">
            <summary>
            Formats the message.
            </summary>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Logging.LoggerBase.LogException(SharpDoc.Logging.LogLocation,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="logLocation">The log location.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:SharpDoc.Logging.ConsoleLogger.Exit(System.String,System.Int32)">
            <summary>
            Exits the process with the specified reason.
            </summary>
            <param name="reason">The reason.</param>
            <param name="exitCode">The exit code</param>
        </member>
        <member name="M:SharpDoc.Logging.ConsoleLogger.Log(SharpDoc.Logging.LogLevel,SharpDoc.Logging.LogLocation,System.String,System.String,System.Exception,System.Object[])">
            <summary>
            Logs the specified log message.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="logLocation">The log location.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:SharpDoc.Logging.ConsoleLogger.Output">
            <summary>
            Gets or sets the output <see cref="T:System.IO.TextWriter"/>. Default is set to <see cref="P:System.Console.Out"/>.
            </summary>
            <value>The output <see cref="T:System.IO.TextWriter"/>.</value>
        </member>
        <member name="T:SharpDoc.Logging.IProgressReport">
            <summary>
            Interface to notify progress.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.IProgressReport.ProgressStatus(System.Int32,System.String)">
            <summary>
            Notify progress.
            </summary>
            <param name="level">The level 0-100.</param>
            <param name="message">The message to notify.</param>
            <returns>true if the process is aborted; false otherwise</returns>
        </member>
        <member name="T:SharpDoc.Logging.Logger">
            <summary>
            Root Logger class.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.Logger.#cctor">
            <summary>
            Initializes the <see cref="T:SharpDoc.Logging.Logger"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.Logger.RunInContext(System.String,SharpDoc.Logging.Logger.MethodLogInContext)">
            <summary>
              Runs a delegate in the specified log context.
            </summary>
            <param name = "context">The context.</param>
            <param name = "method">The method.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.PushContext(System.String)">
            <summary>
              Pushes a context string.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.PushLocation(System.String,System.Int32,System.Int32)">
            <summary>
              Pushes a context location.
            </summary>
            <param name = "fileName">Name of the file.</param>
            <param name = "line">The line.</param>
            <param name = "column">The column.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.PopLocation">
            <summary>
              Pops the context location.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.Logger.PushContext(System.String,System.Object[])">
            <summary>
              Pushes a context formatted string.
            </summary>
            <param name = "context">The context.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.PopContext">
            <summary>
              Pops the context.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Message(System.String)">
            <summary>
              Logs the specified message.
            </summary>
            <param name = "message">The message.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Message(System.String,System.Object[])">
            <summary>
              Logs the specified message.
            </summary>
            <param name = "message">The message.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Progress(System.Int32,System.String,System.Object[])">
            <summary>
              Logs the specified progress level and message.
            </summary>
            <param name = "level">The level.</param>
            <param name = "message">The message.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Warning(System.String)">
            <summary>
              Logs the specified warning.
            </summary>
            <param name = "message">The message.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Warning(System.String,System.Object[])">
            <summary>
              Logs the specified warning.
            </summary>
            <param name = "message">The message.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Error(System.String,System.Exception,System.Object[])">
            <summary>
              Logs the specified error.
            </summary>
            <param name = "message">The message.</param>
            <param name = "ex">The ex.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Error(System.String)">
            <summary>
              Logs the specified error.
            </summary>
            <param name = "message">The message.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
              Logs the specified error.
            </summary>
            <param name = "message">The message.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
              Logs the specified fatal error.
            </summary>
            <param name = "message">The message.</param>
            <param name = "ex">The exception.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Fatal(System.String)">
            <summary>
              Logs the specified fatal error.
            </summary>
            <param name = "message">The message.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Fatal(System.String,System.Object[])">
            <summary>
              Logs the specified fatal error.
            </summary>
            <param name = "message">The message.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.Exit(System.String,System.Object[])">
            <summary>
            Exits the process.
            </summary>
            <param name="reason">The reason.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.Logging.Logger.LogRawMessage(SharpDoc.Logging.LogLevel,System.String,System.Exception,System.Object[])">
            <summary>
              Logs the raw message to the LoggerOutput.
            </summary>
            <param name = "type">The type.</param>
            <param name = "message">The message.</param>
            <param name = "exception">The exception.</param>
            <param name = "parameters">The parameters.</param>
        </member>
        <member name="P:SharpDoc.Logging.Logger.ContextAsText">
            <summary>
            Gets the context as a string.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:SharpDoc.Logging.Logger.LoggerOutput">
            <summary>
              Gets or sets the logger output.
            </summary>
            <value>The logger output.</value>
        </member>
        <member name="P:SharpDoc.Logging.Logger.HasContext">
            <summary>
              Gets a value indicating whether this instance has context.
            </summary>
            <value>
              <c>true</c> if this instance has context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Logging.Logger.HasErrors">
            <summary>
              Gets a value indicating whether this instance has errors.
            </summary>
            <value>
              <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Logging.Logger.ProgressReport">
            <summary>
              Gets or sets the progress report.
            </summary>
            <value>The progress report.</value>
        </member>
        <member name="T:SharpDoc.Logging.Logger.MethodLogInContext">
            <summary>
            Public delegate for an execution inside a log context.
            </summary>
        </member>
        <member name="T:SharpDoc.Logging.LogLevel">
            <summary>
            Logging level.
            </summary>
        </member>
        <member name="F:SharpDoc.Logging.LogLevel.Info">
            <summary>
            Logging information.
            </summary>
        </member>
        <member name="F:SharpDoc.Logging.LogLevel.Warning">
            <summary>
            Logging Warning.
            </summary>
        </member>
        <member name="F:SharpDoc.Logging.LogLevel.Error">
            <summary>
            Logging Error.
            </summary>
        </member>
        <member name="F:SharpDoc.Logging.LogLevel.Fatal">
            <summary>
            Logging Fatal.
            </summary>
        </member>
        <member name="T:SharpDoc.Logging.LogLocation">
            <summary>
            Source code location of a logging message.
            </summary>
        </member>
        <member name="M:SharpDoc.Logging.LogLocation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Logging.LogLocation"/> class.
            </summary>
            <param name="filePath">The file location.</param>
        </member>
        <member name="M:SharpDoc.Logging.LogLocation.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Logging.LogLocation"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:SharpDoc.Logging.LogLocation.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Logging.LogLocation"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="P:SharpDoc.Logging.LogLocation.File">
            <summary>
            Gets the file location.
            </summary>
            <value>The file location.</value>
        </member>
        <member name="P:SharpDoc.Logging.LogLocation.Line">
            <summary>
            Gets the line inside the file.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:SharpDoc.Logging.LogLocation.Column">
            <summary>
            Gets the column inside the line of the file.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers.
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format,
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is
            either a tag (possibly with nested, tags contained therein, such
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the
            array is a two-element array; the first is either 'tag' or 'text'; the second is
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title")
            [link text][id]
            [id]
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags.
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
             <summary>
             Turn Markdown headers into HTML header tags
             </summary>
             <remarks>
             Header 1  
             ========  
            
             Header 2  
             --------  
            
             # Header 1  
             ## Header 2  
             ## Header 2 with closing hashes ##  
             ...  
             ###### Header 6  
             </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String,System.Boolean)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String,System.Boolean)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoFencedCodeBlocks(System.String)">
            <summary>
            Turn Markdown github fenced code blocks ``` into HTML pre code blocks with 
            syntax highlighter syntax handling
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they
            don't conflict with their use in Markdown for code, italics and strong.
            We're replacing each such character with its corresponding hash
            value; this is likely overkill, but it should prevent us from colliding
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces;
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF);
            makes sure text ends with a couple of newlines;
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="T:SharpDoc.Model.IOverridable">
            <summary>
            An overridable member.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.INMemberReference">
            <summary>
            A member reference.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.IModelReference">
            <summary>
            A base model used to identify a type, member.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.IComment">
            <summary>
            This interface contains xml code comments.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.IComment.DocNode">
            <summary>
            Gets or sets the <see cref="T:System.Xml.XmlNode"/> extracted from the code comments 
            for a particular member.
            </summary>
            <value>The XmlNode doc.</value>
        </member>
        <member name="P:SharpDoc.Model.IComment.Description">
            <summary>
            Gets or sets the description extracted from the &lt;summary&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SharpDoc.Model.IComment.Remarks">
            <summary>
            Gets or sets the remarks extracted from the &lt;remarks&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The remarks.</value>
        </member>
        <member name="P:SharpDoc.Model.IComment.WebDocPage">
            <summary>
            Gets or sets the web documentation page extracted from the &lt;webdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The corresponding webDocumentation page.</value>
        </member>
        <member name="P:SharpDoc.Model.IComment.InheritDoc">
            <summary>
            Gets or sets the &lt;inheritdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The inheritdoc xml node.</value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.Index">
            <summary>
            Gets or sets the unique index of this node.
            </summary>
            <value>
            The unique index.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.Id">
            <summary>
            Gets or sets the XML generated comment ID.
            See http://msdn.microsoft.com/en-us/library/fsbx0t7x.aspx for more information.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.PageId">
            <summary>
            Gets or sets the normalized id. This is a normalized version of the <see cref="P:SharpDoc.Model.IModelReference.Id"/> that
            can be used for filename.
            </summary>
            <value>The file id.</value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.PageTitle">
            <summary>
            Gets or sets the page title.
            </summary>
            <value>
            The page title.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.FullName">
            <summary>
            Gets or sets the full name of this instance.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IModelReference.Assembly">
            <summary>
            Gets the assembly this model reference is attached to.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.INMemberReference.InheritDocumentation">
            <summary>
            Use class inheritance and/or interfaces to find corresponding documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.INMemberReference.CopyDocumentation(SharpDoc.Model.INMemberReference)">
            <summary>
            Use the given member to find corresponding documentation.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.DeclaringType">
            <summary>
            Gets or sets the type that is declaring this member.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>
            The namespace.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsArray">
            <summary>
            Gets or sets a value indicating whether this instance is an array.
            </summary>
            <value><c>true</c> if this instance is an array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsPointer">
            <summary>
            Gets or sets a value indicating whether this instance is pointer.
            </summary>
            <value>
            	<c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsSentinel">
            <summary>
            Gets or sets a value indicating whether this instance is sentinel.
            </summary>
            <value>
            	<c>true</c> if this instance is sentinel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsGenericInstance">
            <summary>
            Gets or sets a value indicating whether this instance is generic instance.
            </summary>
            <value>
            	<c>true</c> if this instance is generic instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsGenericParameter">
            <summary>
            Gets or sets a value indicating whether this instance is generic parameter.
            </summary>
            <value>
            	<c>true</c> if this instance is generic parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsExtensionDefinition">
            <summary>
            Gets or sets a value indicating whether this instance is the definition of an extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is the definition of an extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.IsExtensionMethod">
            <summary>
            Gets or sets a value indicating whether this instance is an extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is an extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.ElementType">
            <summary>
            Gets or sets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.GenericParameters">
            <summary>
            Gets or sets the generic parameters.
            </summary>
            <value>The generic parameters.</value>
        </member>
        <member name="P:SharpDoc.Model.INMemberReference.GenericArguments">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <value>The generic arguments.</value>
        </member>
        <member name="P:SharpDoc.Model.IOverridable.IsVirtual">
            <summary>
            Gets a value indicating whether this instance is virtual.
            </summary>
            <value>
            	<c>true</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IOverridable.HasOverrides">
            <summary>
            Gets a value indicating whether this instance has overrides.
            </summary>
            <value>
            	<c>true</c> if this instance has overrides; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IOverridable.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:SharpDoc.Model.IOverridable.HasImplements">
            <summary>
            Gets a value indicating whether this instance has implements.
            </summary>
            <value>
            	<c>true</c> if this instance has implements; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IOverridable.Implements">
            <summary>
            Gets or sets the implements.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="T:SharpDoc.Model.NPropertyReference">
            <summary>
            A property reference.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NMemberReference">
            <summary>
            Member reference
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NReference">
            <summary>
            A reference to a documentable element.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NReference.OnDocNodeUpdate">
            <summary>
            Called when <see cref="P:SharpDoc.Model.NReference.DocNode"/> is updated.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NReference.Id">
            <summary>
            Gets or sets the XML generated comment ID.
            See http://msdn.microsoft.com/en-us/library/fsbx0t7x.aspx for more information.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.PageId">
            <summary>
            Gets or sets the normalized id. This is a normalized version of the <see cref="P:SharpDoc.Model.IModelReference.Id"/> that
            can be used for filename.
            </summary>
            <value>The file id.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.PageTitle">
            <summary>
            Gets or sets the page title.
            </summary>
            <value>
            The page title.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NReference.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.FullName">
            <summary>
            Gets or sets the full name of this instance.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NReference.DocNode">
            <summary>
            Gets or sets the <see cref="T:System.Xml.XmlNode"/> extracted from the code comments 
            for a particular member.
            </summary>
            <value>The XmlNode doc.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.Description">
            <summary>
            Gets or sets the description extracted from the &lt;summary&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.Remarks">
            <summary>
            Gets or sets the remarks extracted from the &lt;remarks&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The remarks.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.WebDocPage">
            <summary>
            Gets or sets the web documentation page extracted from the &lt;webdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The corresponding webDocumentation page.</value>
        </member>
        <member name="P:SharpDoc.Model.NReference.InheritDoc">
            <summary>
            Gets or sets the &lt;inheritdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The inheritdoc xml node.</value>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NMemberReference"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.Equals(SharpDoc.Model.NMemberReference)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NMemberReference.InheritDocumentation">
            <summary>
            Use class inheritance and/or interfaces to find corresponding documentation.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.DeclaringType">
            <summary>
            Gets or sets the type that is declaring this member.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>
            The namespace.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsArray">
            <summary>
            Gets or sets a value indicating whether this instance is an array.
            </summary>
            <value>
            	<c>true</c> if this instance is an array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsPointer">
            <summary>
            Gets or sets a value indicating whether this instance is pointer.
            </summary>
            <value>
            	<c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsSentinel">
            <summary>
            Gets or sets a value indicating whether this instance is sentinel.
            </summary>
            <value>
            	<c>true</c> if this instance is sentinel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsGenericInstance">
            <summary>
            Gets or sets a value indicating whether this instance is generic instance.
            </summary>
            <value>
            	<c>true</c> if this instance is generic instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsGenericParameter">
            <summary>
            Gets or sets a value indicating whether this instance is generic parameter.
            </summary>
            <value>
            	<c>true</c> if this instance is generic parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsExtensionDefinition">
            <summary>
            Gets or sets a value indicating whether this instance is the definition ofan extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is the definition ofan extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.IsExtensionMethod">
            <summary>
            Gets or sets a value indicating whether this instance is an extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is an extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.ElementType">
            <summary>
            Gets or sets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.GenericParameters">
            <summary>
            Gets or sets the generic parameters.
            </summary>
            <value>The generic parameters.</value>
        </member>
        <member name="P:SharpDoc.Model.NMemberReference.GenericArguments">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <value>The generic arguments.</value>
        </member>
        <member name="M:SharpDoc.Model.NPropertyReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:SharpDoc.Model.NExtensionMethod">
            <summary>
            An extension method description.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NExtensionMethod.#ctor(SharpDoc.Model.NTypeReference,SharpDoc.Model.NMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NExtensionMethod"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NExtensionMethod.ExtendedType">
            <summary>
            Gets or sets the type concerned by the extension.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NExtensionMethod.Method">
            <summary>
            Gets or sets the extension method.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NDocumentApi">
            <summary>
            Front end to a XML generated documentation, used to find documentation about a type reference.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NDocumentApi.Load(System.String)">
            <summary>
            Loads the xml documentation from the specified path..
            </summary>
            <param name="path">The path to a xml doc file.</param>
            <returns>A NDocumentApi or null if failed to read</returns>
        </member>
        <member name="M:SharpDoc.Model.NDocumentApi.FindMemberDoc(System.String)">
            <summary>
            Finds a member doc from the <see cref="P:SharpDoc.Model.NDocumentApi.Document"/>.
            </summary>
            <param name="memberId">The member id.</param>
            <returns>A node of the member if found or otherwise, null.</returns>
        </member>
        <member name="M:SharpDoc.Model.NDocumentApi.GetTag(System.Xml.XmlNode,System.String)">
            <summary>
            Extract a comment from tag inside the <see cref="P:SharpDoc.Model.NModelBase.DocNode"/> associated
            to this element.
            </summary>
            <param name="docNode">The doc node.</param>
            <param name="tagName">Name of the tag.</param>
            <returns>
            The content of the tag or null if empty or not found
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NDocumentApi.GetXmlNode(System.Xml.XmlNode,System.String)">
            <summary>
            Extract the xml tag inside the <see cref="P:SharpDoc.Model.NModelBase.DocNode"/> associated
            to this element.
            </summary>
            <param name="docNode">The doc node.</param>
            <param name="tagName">Name of the tag.</param>
            <returns>
            The tag or null if not found
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NDocumentApi.Document">
            <summary>
            Gets or sets the XML document that contains code comments.
            </summary>
            <value>The document.</value>
        </member>
        <member name="T:SharpDoc.Model.NSeeAlso">
            <summary>
            A See Also reference
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NSeeAlso.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NSeeAlso"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NSeeAlso.#ctor(SharpDoc.Model.IModelReference)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NSeeAlso"/> class.
            </summary>
            <param name="linkItem">The link item.</param>
        </member>
        <member name="M:SharpDoc.Model.NSeeAlso.#ctor(System.String,SharpDoc.Model.IModelReference)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NSeeAlso"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="linkItem">The link item.</param>
        </member>
        <member name="P:SharpDoc.Model.NSeeAlso.GroupName">
            <summary>
            Gets or sets the name of the group. Default is "Reference"
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NSeeAlso.LinkItem">
            <summary>
            Gets or sets the linked item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="T:SharpDoc.MonoCecilAssemblyManager">
            <summary>
            Mono Cecil implementation of <see cref="T:SharpDoc.Model.IAssemblyManager"/>.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.IAssemblyManager">
            <summary>
            Interface to load assembly and comments files from a config description.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.IAssemblyManager.Load(SharpDoc.Config)">
            <summary>
            Loads all <see cref="P:SharpDoc.Config.Sources"/> and <see cref="P:SharpDoc.Config.References"/>.
            </summary>
            <param name="config">The config file to use.</param>
            <returns>A list of assembly source</returns>
        </member>
        <member name="M:SharpDoc.MonoCecilAssemblyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.MonoCecilAssemblyManager"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.MonoCecilAssemblyManager.Load(SharpDoc.Config)">
            <summary>
            Loads all assembly sources/xml doc and references
            </summary>
        </member>
        <member name="T:SharpDoc.ConfigParam">
            <summary>
            A pair name=value used in config for Parameters and Style.
            </summary>
        </member>
        <member name="M:SharpDoc.ConfigParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.ConfigParam"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.ConfigParam.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.ConfigParam"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SharpDoc.ConfigParam.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.ConfigParam.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:SharpDoc.DynamicParam">
            <summary>
            Dynamic object used in templates for Param and Style shortcuts.
            This class acts as a <see cref="T:System.Dynamic.ExpandoObject"/> except that if a property
            doesn't exist, It returns a null value instead of throwing an exception.
            </summary>
        </member>
        <member name="M:SharpDoc.DynamicParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.DynamicParam"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.DynamicParam.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:SharpDoc.DynamicParam.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="P:SharpDoc.DynamicParam.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:SharpDoc.LinkType">
            <summary>
            Describes a link to a documentation.
            </summary>
        </member>
        <member name="F:SharpDoc.LinkType.None">
            <summary>
            No URL is available. 
            </summary>
        </member>
        <member name="F:SharpDoc.LinkType.Self">
            <summary>
            URL is self referencing a member to the current context
            </summary>
        </member>
        <member name="F:SharpDoc.LinkType.Local">
            <summary>
            URL is generated locally
            </summary>
        </member>
        <member name="F:SharpDoc.LinkType.External">
            <summary>
            URL is an external link (http, https)
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NDelegate">
            <summary>
            A delegate documentation.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NType">
            <summary>
            The base class for class or structure.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NMember">
            <summary>
            An abstract member of a <see cref="T:SharpDoc.Model.NType"/>.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NModelBase">
            <summary>
            Base class for <see cref="T:SharpDoc.Model.IModelReference"/>.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.SetApiGroup(System.String,System.Boolean)">
            <summary>
            Sets the API group.
            </summary>
            <param name="name">The name.</param>
            <param name="state">if set to <c>true</c> [state].</param>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.OnDocNodeUpdate">
            <summary>
            Called when <see cref="P:SharpDoc.Model.NModelBase.DocNode"/> is updated.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.Equals(SharpDoc.Model.NModelBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.op_Equality(SharpDoc.Model.NModelBase,SharpDoc.Model.NModelBase)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharpDoc.Model.NModelBase.op_Inequality(SharpDoc.Model.NModelBase,SharpDoc.Model.NModelBase)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Id">
            <summary>
            Gets or sets the XML generated comment ID.
            See http://msdn.microsoft.com/en-us/library/fsbx0t7x.aspx for more information.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.PageId">
            <summary>
            Gets or sets the file id. THis is a version of the <see cref="P:SharpDoc.Model.IModelReference.Id"/> that
            can be used for filename.
            </summary>
            <value>The file id.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.PageTitle">
            <summary>
            Gets or sets the page title.
            </summary>
            <value>
            The page title.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.FullName">
            <summary>
            Gets or sets the full name of this instance.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.DocNode">
            <summary>
            Gets or sets the <see cref="T:System.Xml.XmlNode"/> extracted from the code comments 
            for a particular member.
            </summary>
            <value>The XmlNode doc.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Description">
            <summary>
            Gets or sets the description extracted from the &lt;summary&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.UnManagedApi">
            <summary>
            Gets or sets the un managed API.
            </summary>
            <value>
            The un managed API.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.UnManagedShortApi">
            <summary>
            Gets or sets the un managed API.
            </summary>
            <value>
            The un managed API.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.MsdnId">
            <summary>
            Gets or sets the MSDN id.
            </summary>
            <value>
            The MSDN id.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Remarks">
            <summary>
            Gets or sets the remarks extracted from the &lt;remarks&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The remarks.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.WebDocPage">
            <summary>
            Gets or sets the web documentation page extracted from the &lt;webdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The corresponding webDocumentation page.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.InheritDoc">
            <summary>
            Gets or sets the &lt;inheritdoc&gt; tag of the <see cref="P:SharpDoc.Model.IComment.DocNode"/>.
            </summary>
            <value>The inheritdoc xml node.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.TopicLink">
            <summary>
            Gets or sets the topic link.
            </summary>
            <value>The topic link.</value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.SeeAlsos">
            <summary>
            Gets or sets the see alsos.
            </summary>
            <value>
            The see alsos.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.Groups">
            <summary>
            Gets or sets the group APIs.
            </summary>
            <value>
            The group APIs.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.IsObsolete">
            <summary>
            Gets or sets a value indicating whether this instance is obsolete.
            </summary>
            <value>
            	<c>true</c> if this instance is obsolete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NModelBase.ObsoleteMessage">
            <summary>
            Gets or sets the obsolete message.
            </summary>
            <value>
            The obsolete message.
            </value>
        </member>
        <member name="M:SharpDoc.Model.NMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NMember"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NMember.MembersAs``1">
            <summary>
            Helper method to return a particular collection of members.
            </summary>
            <typeparam name="T">A member</typeparam>
            <returns>A collection of <paramref name="T"/></returns>
        </member>
        <member name="M:SharpDoc.Model.NMember.AddMember(SharpDoc.Model.NMember)">
            <summary>
            Adds a member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:SharpDoc.Model.NMember.InheritDocumentation">
            <summary>
            Use class inheritance and/or interfaces to find corresponding documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NMember.CopyDocumentation(SharpDoc.Model.INMemberReference)">
            <summary>
            The basical documentation inheritence copy &lt;summary&gt;, &lt;remarks&gt;, &lt;webdoc&gt; tags and all other sections
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsArray">
            <summary>
            Gets or sets a value indicating whether this instance is an array.
            </summary>
            <value>
            	<c>true</c> if this instance is an array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsPointer">
            <summary>
            Gets or sets a value indicating whether this instance is pointer.
            </summary>
            <value>
            	<c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsSentinel">
            <summary>
            Gets or sets a value indicating whether this instance is sentinel.
            </summary>
            <value>
            	<c>true</c> if this instance is sentinel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsGenericInstance">
            <summary>
            Gets or sets a value indicating whether this instance is generic instance.
            </summary>
            <value>
            	<c>true</c> if this instance is generic instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsGenericParameter">
            <summary>
            Gets or sets a value indicating whether this instance is generic parameter.
            </summary>
            <value>
            	<c>true</c> if this instance is generic parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsExtensionDefinition">
            <summary>
            Gets or sets a value indicating whether this instance is the definition ofan extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is the definition ofan extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsExtensionMethod">
            <summary>
            Gets or sets a value indicating whether this instance is an extension method.
            </summary>
            <value>
            	<c>true</c> if this instance is an extension method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.ElementType">
            <summary>
            Gets or sets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.GenericParameters">
            <summary>
            Gets or sets the generic parameters.
            </summary>
            <value>The generic parameters.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.GenericArguments">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <value>The generic arguments.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.DeclaringType">
            <summary>
            Gets or sets the type that is declaring this member.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsStatic">
            <summary>
            Gets or sets a value indicating whether this instance is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsFinal">
            <summary>
            Gets or sets a value indicating whether this instance is final.
            </summary>
            <value><c>true</c> if this instance is final; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this instance is abstract.
            </summary>
            <value>
            	<c>true</c> if this instance is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.Visibility">
            <summary>
            Gets or sets the visibility.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.VisibilityName">
            <summary>
            Gets the name of the visibility.
            </summary>
            <value>The name of the visibility.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.VisibilityFullName">
            <summary>
            Gets the name of the visibility.
            </summary>
            <value>
            The name of the visibility.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMember.Namespace">
            <summary>
            Gets or sets the namespace this member is attached.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.MemberType">
            <summary>
            Gets or sets the type of the member.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.Parent">
            <summary>
            Gets or sets the parent. This is null for root type.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.Members">
            <summary>
            Gets or sets all the members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.Attributes">
            <summary>
            Gets or sets the attributes declaration (as string).
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:SharpDoc.Model.NMember.TypeMember">
            <summary>
            Gets the type member.
            </summary>
            <value>The type member.</value>
        </member>
        <member name="M:SharpDoc.Model.NType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NType"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NType.AllMembers">
            <summary>
            Gets or sets all members (members of this instance + inherited members).
            </summary>
            <value>
            All members.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Bases">
            <summary>
            Gets or sets all base types for this type.
            </summary>
            <value>All the base types.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.Descendants">
            <summary>
            Gets or sets the descendants.
            </summary>
            <value>The descendants.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.FlattenedHierarchy">
            <summary>
            Gets or sets the flattened hierarchy type, including all base types and all derived types.
            The T1 type as <see cref="T:System.Int32"/> returned by the <see cref="T:System.Tuple`2"/> describes
            the level (0 for the root level) in the inheritance hierarchy.
            Objects are return from the most 
            </summary>
            <value>The flattened hierarchy.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.Interfaces">
            <summary>
            Gets or sets the inherited interfaces.
            </summary>
            <value>The interfaces.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasConstructors">
            <summary>
            Gets or sets a value indicating whether this instance has constructors.
            </summary>
            <value>
            	<c>true</c> if this instance has constructors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Constructors">
            <summary>
            Gets the constructors.
            </summary>
            <value>The constructors.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasMethods">
            <summary>
            Gets or sets a value indicating whether this instance has methods.
            </summary>
            <value>
            	<c>true</c> if this instance has methods; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.AllMethods">
            <summary>
            Gets the all methods of this instance and inherited).
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasExtensionMethods">
            <summary>
            Gets or sets a value indicating whether this instance has extension methods.
            </summary>
            <value>
            	<c>true</c> if this instance has extension methods; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.ExtensionMethods">
            <summary>
            Gets the extension methods.
            </summary>
            <value>The extension methods.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.MethodsAndConstructors">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasOperators">
            <summary>
            Gets or sets a value indicating whether this instance has operators.
            </summary>
            <value>
            	<c>true</c> if this instance has operators; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Operators">
            <summary>
            Gets the operators.
            </summary>
            <value>The operators.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasFields">
            <summary>
            Gets or sets a value indicating whether this instance has fields.
            </summary>
            <value>
            	<c>true</c> if this instance has fields; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.AllFields">
            <summary>
            Gets all the fields (with the inherited ones).
            </summary>
            <value>The all the fields.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasProperties">
            <summary>
            Gets or sets a value indicating whether this instance has properties.
            </summary>
            <value>
            	<c>true</c> if this instance has properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.AllProperties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.HasEvents">
            <summary>
            Gets or sets a value indicating whether this instance has events.
            </summary>
            <value>
            	<c>true</c> if this instance has events; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NType.Events">
            <summary>
            Gets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.AllEvents">
            <summary>
            Gets the events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="P:SharpDoc.Model.NType.TypeName">
            <summary>
            Gets the type name of this type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="M:SharpDoc.Model.NDelegate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NDelegate"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NDelegate.Invoke">
            <summary>
            Gets the invoke method for this delegate.
            </summary>
        </member>
        <member name="T:SharpDoc.ModelProcessor">
            <summary>
            A processor to add information to the model after It has been loaded.
            </summary>
        </member>
        <member name="M:SharpDoc.ModelProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.ModelProcessor"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.ModelProcessor.Run(SharpDoc.Config)">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:SharpDoc.ModelProcessor.FlattenHierarchy(SharpDoc.Model.NType,SharpDoc.Model.NType)">
            <summary>
            Flattens the hierarchy for a class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="currentType">Type of the current.</param>
        </member>
        <member name="M:SharpDoc.ModelProcessor.CompareByDisplayName(SharpDoc.Model.INMemberReference,SharpDoc.Model.INMemberReference)">
            <summary>
            Compares the display name of the by two <see cref="T:SharpDoc.Model.INMemberReference"/>.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDoc.ModelProcessor.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:SharpDoc.ModelProcessor.Namespaces">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:SharpDoc.ModelProcessor.AssemblyManager">
            <summary>
            Gets or sets the assembly manager.
            </summary>
            <value>The assembly manager.</value>
        </member>
        <member name="P:SharpDoc.ModelProcessor.ModelBuilder">
            <summary>
            Gets or sets the model builder.
            </summary>
            <value>The model builder.</value>
        </member>
        <member name="P:SharpDoc.ModelProcessor.PageIdFunction">
            <summary>
            Gets or sets the calculate page id.
            </summary>
            <value>
            The calculate page id.
            </value>
        </member>
        <member name="T:SharpDoc.Model.TopicContentLoaderDelegate">
            <summary>
            A delegate to create an HTML string from a template name used by <see cref="T:SharpDoc.Model.NTopic"/>
            </summary>
            <param name="filePath">Name of the template (currently supported are an html file or markdown file).</param>
            <returns>A HTML content</returns>
        </member>
        <member name="T:SharpDoc.Model.NTopic">
            <summary>
            Documentation topic store in an external file.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NTopic.ClassLibraryTopicId">
            <summary>
            Id for the default class library topic
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NTopic.SearchResultsTopicId">
            <summary>
            Id for the default search results topic
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NTopic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NTopic"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NTopic.#ctor(SharpDoc.Model.IModelReference)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NTopic"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:SharpDoc.Model.NTopic.FindTopicById(System.String)">
            <summary>
            Finds the topic by id.
            </summary>
            <param name="topicId">The topic id.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Model.NTopic.ForEachTopic(System.Action{SharpDoc.Model.NTopic})">
            <summary>
            Performs an action on each each topic.
            </summary>
            <param name="topicFunction">The topic function.</param>
        </member>
        <member name="M:SharpDoc.Model.NTopic.FindTopicById(System.Collections.Generic.IEnumerable{SharpDoc.Model.NTopic},System.String)">
            <summary>
            Finds the topic by id.
            </summary>
            <param name="topics">The topics.</param>
            <param name="topicId">The topic id.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Model.NTopic.BuildParents(SharpDoc.Model.NTopic)">
            <summary>
            Associate topics with their parent
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NTopic.GetParents">
            <summary>
            Gets the parents of this instance.
            </summary>
            <returns>Parents of this instance</returns>
            <remarks>
            The parents is ordered from the root level to this instance (excluding this instance)
            </remarks>
        </member>
        <member name="M:SharpDoc.Model.NTopic.Init(SharpDoc.Model.TopicContentLoaderDelegate)">
            <summary>
            Loads the content of this topic.
            </summary>
            <param name="contentLoader">The template factory.</param>
            <exception cref="T:System.ArgumentNullException">contentLoader</exception>
        </member>
        <member name="M:SharpDoc.Model.NTopic.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Id">
            <summary>
            Gets or sets the XML generated comment ID.
            See http://msdn.microsoft.com/en-us/library/fsbx0t7x.aspx for more information.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Index">
            <summary>
            Gets or sets the unique index of this node.
            </summary>
            <value>
            The unique index.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.PageId">
            <summary>
            Gets or sets the normalized id. This is a normalized version of the <see cref="P:SharpDoc.Model.IModelReference.Id"/> that
            can be used for filename.
            </summary>
            <value>The file id.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.PageTitle">
            <summary>
            Gets or sets the page title.
            </summary>
            <value>
            The page title.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.FullName">
            <summary>
            Gets or sets the full name of this instance.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.FileName">
            <summary>
            Gets or sets the name of the file that contains the documentation.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.IsPageIdOnUrl">
            <summary>
            Gets or sets a value indicating whether [use page id URL].
            </summary>
            <value>
              <c>true</c> if [use page id URL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.SubTopics">
            <summary>
            Gets or sets the sub topics.
            </summary>
            <value>The sub topics.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Excludes">
            <summary>
            Gets or sets the excludes.
            </summary>
            <value>
            The excludes.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Resources">
            <summary>
            Gets or sets the attached resources.
            </summary>
            <value>
            The attached resources.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.WebDoc">
            <summary>
            Gets or sets the web document.
            </summary>
            <value>The web document.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Content">
            <summary>
            Gets or sets the html content. This is loaded from the filename.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Parent">
            <summary>
            Gets or sets the parent topic.
            </summary>
            <value>The parent topic.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.AttachedClassNode">
            <summary>
            Gets or sets the class node.
            </summary>
            <value>
            The class node.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.DocNode">
            <inheritdoc/>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Description">
            <inheritdoc/>
        </member>
        <member name="P:SharpDoc.Model.NTopic.Remarks">
            <inheritdoc/>
        </member>
        <member name="P:SharpDoc.Model.NTopic.WebDocPage">
            <inheritdoc/>
        </member>
        <member name="P:SharpDoc.Model.NTopic.InheritDoc">
            <inheritdoc/>
        </member>
        <member name="P:SharpDoc.Model.NTopic.IsClassLibrary">
            <summary>
            Gets a value indicating whether this instance is class library.
            </summary>
            <value>
            	<c>true</c> if this instance is class library; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.IsSearchResult">
            <summary>
            Gets a value indicating whether this instance is search result.
            </summary>
            <value>
            	<c>true</c> if this instance is search result; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.DefaultClassLibraryTopic">
            <summary>
            Gets the default class library topic.
            </summary>
            <value>The default class library topic.</value>
        </member>
        <member name="P:SharpDoc.Model.NTopic.DefaultSearchResultsTopic">
            <summary>
            Gets the default search results topic.
            </summary>
            <value>The default search results topic.</value>
        </member>
        <member name="T:SharpDoc.NamespaceDoc">
            <summary>
            Main namespace for SharpDoc.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NGenericParameter">
            <summary>
            A Generic Parameter description.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NTypeReference">
            <summary>
            A type reference.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NTypeReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NGenericParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NGenericParameter"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.HasConstraints">
            <summary>
            Gets or sets a value indicating whether this instance has constraints.
            </summary>
            <value>
            	<c>true</c> if this instance has constraints; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.Constraints">
            <summary>
            Gets or sets the constraints.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.HasCustomAttributes">
            <summary>
            Gets or sets a value indicating whether this instance has custom attributes.
            </summary>
            <value>
            	<c>true</c> if this instance has custom attributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.HasDefaultConstructorConstraint">
            <summary>
            Gets or sets a value indicating whether this instance has default constructor constraint.
            </summary>
            <value>
            	<c>true</c> if this instance has default constructor constraint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.HasNotNullableValueTypeConstraint">
            <summary>
            Gets or sets a value indicating whether this instance has not nullable value type constraint.
            </summary>
            <value>
            	<c>true</c> if this instance has not nullable value type constraint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NGenericParameter.HasReferenceTypeConstraint">
            <summary>
            Gets or sets a value indicating whether this instance has reference type constraint.
            </summary>
            <value>
            	<c>true</c> if this instance has reference type constraint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDoc.Model.NAssemblySource">
            <summary>
            This class contains an abstract assembly (either from Mono or Reflection)
            and the associated XmlDocument generated from code comments.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NAssemblySource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NAssemblySource"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NAssemblySource.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NAssemblySource"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:SharpDoc.Model.NAssemblySource.#ctor(System.Object,SharpDoc.Model.NDocumentApi)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NAssemblySource"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="document">The document.</param>
        </member>
        <member name="P:SharpDoc.Model.NAssemblySource.Assembly">
            <summary>
            Gets or sets the assembly definition. This is interpreted by specialization of
            <see cref="T:SharpDoc.Model.IModelBuilder"/>.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:SharpDoc.Model.NAssemblySource.Filename">
            <summary>
            Gets or sets the filename.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="P:SharpDoc.Model.NAssemblySource.MergeGroup">
            <summary>
            Gets or sets the merge group.
            </summary>
            <value>
            The merge group.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NAssemblySource.Document">
            <summary>
            Gets or sets the XML document that contains code comments.
            </summary>
            <value>The document.</value>
        </member>
        <member name="T:SharpDoc.Config">
            <summary>
            Config file for SharpDoc.
            </summary>
        </member>
        <member name="F:SharpDoc.Config.DefaultStyleDirectoryName">
            <summary>
            Style directory name
            </summary>
        </member>
        <member name="M:SharpDoc.Config.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Config"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Config.Load(System.String,SharpDoc.Model.TopicContentLoaderDelegate)">
            <summary>
            Loads the specified config file.
            </summary>
            <param name="file">The config file.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Config.FindTopicById(System.String)">
            <summary>
            Finds the topic by id.
            </summary>
            <param name="topicId">The topic id.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.Config.Save(System.String)">
            <summary>
            Loads the specified config file.
            </summary>
            <param name="file">The config file.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDoc.Config.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:SharpDoc.Config.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:SharpDoc.Config.RootTopic">
            <summary>
            Gets or sets the topic.
            </summary>
            <value>The topic.</value>
        </member>
        <member name="P:SharpDoc.Config.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:SharpDoc.Config.AbsoluteOutputDirectory">
            <summary>
            Gets the absolute output directory.
            </summary>
            <value>The absolute output directory.</value>
        </member>
        <member name="P:SharpDoc.Config.Sources">
            <summary>
            Gets or sets a list of source file (assembly or xml comment file).
            </summary>
            <value>The sources file.</value>
        </member>
        <member name="P:SharpDoc.Config.References">
            <summary>
            Gets or sets a list assembly references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:SharpDoc.Config.WebDocumentationUrl">
            <summary>
            Gets or sets the extern documentation webSite url.
            </summary>
            <value>The extern documentation webSite url.</value>
        </member>
        <member name="P:SharpDoc.Config.WebDocumentationLogin">
            <summary>
            Gets or sets the extern documentation webSite login.
            </summary>
            <value>The the extern documentation webSite login.</value>
        </member>
        <member name="P:SharpDoc.Config.Parameters">
            <summary>
            Gets or sets parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SharpDoc.Config.StyleParameters">
            <summary>
            Gets or sets styles override.
            </summary>
            <value>The styles override.</value>
        </member>
        <member name="P:SharpDoc.Config.StyleNames">
            <summary>
            Gets or sets the name of the style.
            </summary>
            <value>The name of the style.</value>
        </member>
        <member name="P:SharpDoc.Config.ExcludeList">
            <summary>
            Gets or sets the exclude list (namespaces, types...etc.).
            </summary>
            <value>The exclude list.</value>
        </member>
        <member name="P:SharpDoc.Config.StyleDirectories">
            <summary>
            Gets or sets styles override.
            </summary>
            <value>The styles override.</value>
        </member>
        <member name="P:SharpDoc.Config.OutputType">
            <summary>
            Gets or sets the type of the output.
            </summary>
            <value>The type of the output.</value>
        </member>
        <member name="P:SharpDoc.Config.DocPak">
            <summary>
            Gets or sets the doc pak.
            </summary>
            <value>The doc pak.</value>
        </member>
        <member name="P:SharpDoc.Config.TopicTemplate">
            <summary>
            Gets or sets a value indicating whether [use template doc].
            </summary>
            <value>
              <c>true</c> if [use template doc]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDoc.Model.DocTag">
            <summary>
            XML Recommended Tags for Documentation Comments.
            http://msdn.microsoft.com/en-us/library/5ast78ax.aspx
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.UnManaged">
            <summary>
            SharpDX unmanaged tag &lt;unmanaged&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Summary">
            <summary>
            &lt;summary&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Remarks">
            <summary>
            &lt;remarks&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Value">
            <summary>
            &lt;value&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Returns">
            <summary>
            &lt;returns&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.SeeAlso">
            <summary>
            &lt;seealso&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.See">
            <summary>
            &lt;see&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Exception">
            <summary>
            &lt;exception&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Parameter">
            <summary>
            &lt;param&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.Permission">
            <summary>
            &lt;permission&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.WebDoc">
            <summary>
            &lt;webdoc&gt; tag.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.DocTag.InheritDoc">
            <summary>
            &lt;inheritdoc&gt; tag.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.IModelBuilder">
            <summary>
            Interface for building a model documentation from an <see cref="T:SharpDoc.Model.NAssemblySource"/>.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.IModelBuilder.LoadFrom(SharpDoc.Model.NAssemblySource,SharpDoc.Model.MemberRegistry)">
            <summary>
            Loads from an assembly source definition all types to document. 
            </summary>
            <param name="assemblySource">The assembly source definition.</param>
            <param name="memberRegistry">The member registry to populate with types.</param>
        </member>
        <member name="P:SharpDoc.Model.IModelBuilder.PageIdFunction">
            <summary>
            Gets or sets the calculate page id.
            </summary>
            <value>
            The calculate page id.
            </value>
        </member>
        <member name="P:SharpDoc.Model.IModelBuilder.ExcludeList">
            <summary>
            Gets or sets the exclude list (namespaces, types...etc.) to exclude from the generated output.
            </summary>
            <value>The exclude list.</value>
        </member>
        <member name="T:SharpDoc.Model.MemberRegistry">
            <summary>
            A class that associate a xml id to a <see cref="T:SharpDoc.Model.IModelReference"/>.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.MemberRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.MemberRegistry"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.MemberRegistry.FindById(System.String)">
            <summary>
            Finds the by id.
            </summary>
            <param name="id">The id.</param>
            <returns>IModelReference.</returns>
        </member>
        <member name="M:SharpDoc.Model.MemberRegistry.Register(SharpDoc.Model.NTopic)">
            <summary>
            Registers the specified topic and all subtopics.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.MemberRegistry.Register(SharpDoc.Model.IModelReference)">
            <summary>
            Registers the specified model element with the specified id.
            </summary>
            <param name="containerId">The container id.</param>
            <param name="modelReference">The model element.</param>
        </member>
        <member name="T:SharpDoc.Model.NInterface">
            <summary>
            An interface documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NInterface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NInterface"/> class.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NVisibility">
            <summary>
            Visibility of an element.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NVisibility.Public">
            <summary>
            Public element.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NVisibility.Private">
            <summary>
            Private element.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NVisibility.Protected">
            <summary>
            Protected element.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NVisibility.Internal">
            <summary>
            Internal element.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NVisibility.ProtectedInternal">
            <summary>
            Protected and Internal element.
            </summary>
        </member>
        <member name="T:SharpDoc.MonoCecilModelBuilder">
            <summary>
            Mono.Cecil implementation of a <see cref="T:SharpDoc.Model.IModelBuilder"/>.
            </summary>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.LoadFrom(SharpDoc.Model.NAssemblySource,SharpDoc.Model.MemberRegistry)">
            <summary>
            Loads from an assembly source definition all types to document.
            </summary>
            <param name="assemblySource">The assembly source definition.</param>
            <param name="memberRegistry">The member registry to populate with types.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddNamespace(SharpDoc.Model.NAssembly,System.String)">
            <summary>
            Adds the namespace.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddType(SharpDoc.Model.NNamespace,Mono.Cecil.TypeDefinition)">
            <summary>
            Adds the type.
            </summary>
            <param name="namespace">The @namespace.</param>
            <param name="typeDef">The type def.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.IsMemberToDisplay(Mono.Cecil.MemberReference)">
            <summary>
            Determines whether [is member to display] [the specified member ref].
            </summary>
            <param name="memberRef">The member ref.</param>
            <returns>
              <c>true</c> if [is member to display] [the specified member ref]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.CreateMethodFromDefinition(SharpDoc.Model.NNamespace,Mono.Cecil.MethodDefinition)">
            <summary>
            Creates a method from a method definition.
            </summary>
            <param name="methodDef">The method def.</param>
            <returns>A NMethod</returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddMethod(SharpDoc.Model.NMember,Mono.Cecil.MethodDefinition,System.Boolean)">
            <summary>
            Adds the method.
            </summary>
            <param name="parent">The parent.</param>
            <param name="methodDef">The method def.</param>
            <param name="isSpecialMethod">if set to <c>true</c> [is property].</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.BuildMethodSignatureGenericParameters(SharpDoc.Model.NMethod,System.Text.StringBuilder)">
            <summary>
            Builds the method signature parameters.
            </summary>
            <param name="self">The self.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.BuildMethodSignatureParameters(SharpDoc.Model.NMethod,System.Text.StringBuilder)">
            <summary>
            Builds the method signature parameters.
            </summary>
            <param name="self">The self.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddParameter(SharpDoc.Model.NMethod,Mono.Cecil.ParameterDefinition)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="method">The method.</param>
            <param name="parameterDef">The parameter def.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddEvent(SharpDoc.Model.NType,Mono.Cecil.EventDefinition)">
            <summary>
            Adds the event.
            </summary>
            <param name="parent">The parent.</param>
            <param name="eventDef">The event def.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddField(SharpDoc.Model.NType,Mono.Cecil.FieldDefinition)">
            <summary>
            Adds the field.
            </summary>
            <param name="parent">The parent.</param>
            <param name="fieldDef">The field def.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.AddProperty(SharpDoc.Model.NType,Mono.Cecil.PropertyDefinition)">
            <summary>
            Adds the property.
            </summary>
            <param name="parent">The parent.</param>
            <param name="propertyDef">The property def.</param>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.NewInstance``1(SharpDoc.Model.NNamespace,Mono.Cecil.MemberReference)">
            <summary>
            New instance of a <see cref="T:SharpDoc.Model.IModelReference"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberRef">The type def.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.BuildGenericName(System.String,System.Collections.Generic.IEnumerable{SharpDoc.Model.NTypeReference})">
            <summary>
            Gets the name of a generic type. Instead of List`1 returns List&lt;T&gt;
            </summary>
            <param name="name">The original name that contains a ` indicating the usage of generics.</param>
            <param name="genericParameters">The generic parameters/arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.CustomAttributeToString(SharpDoc.Model.NMember,Mono.Cecil.CustomAttribute)">
            <summary>
            Convert a custom attribute declaration to a textual declaration.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.GetTextFromValue(System.Object)">
            <summary>
            Gets the text from value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.MonoCecilModelBuilder.FillGenericParameters(SharpDoc.Model.INMemberReference,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Fills the generic parameters.
            </summary>
            <param name="member">The member.</param>
            <param name="genericParameterProvider">The generic parameter provider.</param>
        </member>
        <member name="T:SharpDoc.Model.NAssembly">
            <summary>
            Class for assembly documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NAssembly"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NAssembly.Equals(SharpDoc.Model.NAssembly)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NAssembly.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NAssembly.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NAssembly.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:SharpDoc.Model.NAssembly.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:SharpDoc.Model.NAssembly.Namespaces">
            <summary>
            Gets or sets the namespaces.
            </summary>
            <value>The namespaces.</value>
        </member>
        <member name="T:SharpDoc.Model.NClass">
            <summary>
            A class documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NClass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NClass"/> class.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NConstructor">
            <summary>
            A constructor documentation.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NMethod">
            <summary>
            A method member.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NMethod"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NMethod.AddParameter(SharpDoc.Model.NParameter)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:SharpDoc.Model.NMethod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NMethod.ReturnType">
            <summary>
            Gets or sets the type of the return.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.HasOverrides">
            <summary>
            Gets or sets a value indicating whether this instance has overrides.
            </summary>
            <value>
            	<c>true</c> if this instance has overrides; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this instance is virtual.
            </summary>
            <value>
            	<c>true</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.HasImplements">
            <summary>
            Gets or sets a value indicating whether this instance has implements.
            </summary>
            <value>
            	<c>true</c> if this instance has implements; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.Implements">
            <summary>
            Gets or sets the implements method.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.HasParameters">
            <summary>
            Gets a value indicating whether this instance has parameters.
            </summary>
            <value>
            	<c>true</c> if this instance has parameters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.Signature">
            <summary>
            Gets or sets the text of the signature of this method.
            </summary>
            <value>The text of the signature of this method.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.ReturnDescription">
            <summary>
            Gets or sets the return description.
            </summary>
            <value>The return description.</value>
        </member>
        <member name="P:SharpDoc.Model.NMethod.ExtensionSource">
            <summary>
            Gets or sets the member in which the extension method has been defined.
            </summary>
            <value>The member in which the extension method has been defined</value>
        </member>
        <member name="T:SharpDoc.Model.NEvent">
            <summary>
            An event documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NEvent"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NEvent.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NEvent.IsVirtual">
            <summary>
            Gets a value indicating whether this instance is virtual.
            </summary>
            <value>
            	<c>true</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NEvent.HasOverrides">
            <summary>
            Gets a value indicating whether this instance has overrides.
            </summary>
            <value>
            	<c>true</c> if this instance has overrides; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NEvent.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:SharpDoc.Model.NEvent.HasImplements">
            <summary>
            Gets a value indicating whether this instance has implements.
            </summary>
            <value>
            	<c>true</c> if this instance has implements; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NEvent.Implements">
            <summary>
            Gets or sets the implements.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="T:SharpDoc.Model.NField">
            <summary>
            A field documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NField"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NField.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:SharpDoc.Model.NField.ConstantValue">
            <summary>
            Gets or sets the value affected to this field. Only valid for enums.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:SharpDoc.Model.NNamespace">
            <summary>
            A .Net namespace.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NNamespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NNamespace"/> class.
            </summary>
            <param name="name">The name of this namespace.</param>
        </member>
        <member name="M:SharpDoc.Model.NNamespace.AddType(SharpDoc.Model.NType)">
            <summary>
            Adds the type to this namespace
            </summary>
            <param name="type">The member.</param>
        </member>
        <member name="M:SharpDoc.Model.NNamespace.Equals(SharpDoc.Model.NNamespace)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NNamespace.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.Model.NNamespace.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Types">
            <summary>
            Gets or sets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.HasStructures">
            <summary>
            Gets a value indicating whether this instance has structures.
            </summary>
            <value>
            	<c>true</c> if this instance has structures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Structures">
            <summary>
            Gets the structures.
            </summary>
            <value>The structures.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.HasClasses">
            <summary>
            Gets a value indicating whether this instance has classes.
            </summary>
            <value>
            	<c>true</c> if this instance has classes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Classes">
            <summary>
            Gets the classes.
            </summary>
            <value>The classes.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.HasInterfaces">
            <summary>
            Gets a value indicating whether this instance has interfaces.
            </summary>
            <value>
            	<c>true</c> if this instance has interfaces; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Interfaces">
            <summary>
            Gets the interfaces.
            </summary>
            <value>The interfaces.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.HasEnums">
            <summary>
            Gets a value indicating whether this instance has enums.
            </summary>
            <value><c>true</c> if this instance has enums; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Enums">
            <summary>
            Gets the enums.
            </summary>
            <value>The enums.</value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.HasDelegates">
            <summary>
            Gets a value indicating whether this instance has delegates.
            </summary>
            <value>
            	<c>true</c> if this instance has delegates; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NNamespace.Delegates">
            <summary>
            Gets the enums.
            </summary>
            <value>The enums.</value>
        </member>
        <member name="T:SharpDoc.Model.NOperator">
            <summary>
            An operator document.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NParameter">
            <summary>
            A parameter document.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NParameter.IsIn">
            <summary>
            Gets or sets a value indicating whether this instance is in.
            </summary>
            <value><c>true</c> if this instance is in; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.NParameter.IsOptional">
            <summary>
            Gets or sets a value indicating whether this instance is optional.
            </summary>
            <value>
            	<c>true</c> if this instance is optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NParameter.IsOut">
            <summary>
            Gets or sets a value indicating whether this instance is out.
            </summary>
            <value><c>true</c> if this instance is out; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpDoc.Model.NParameter.IsReturnValue">
            <summary>
            Gets or sets a value indicating whether this instance is return value.
            </summary>
            <value>
            	<c>true</c> if this instance is return value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NParameter.ParameterType">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:SharpDoc.Model.NParameter.ParentMethod">
            <summary>
            Gets or sets the parent method.
            </summary>
            <value>The parent method.</value>
        </member>
        <member name="T:SharpDoc.Model.NProperty">
            <summary>
            A property document.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NProperty"/> class.
            </summary>
        </member>
        <member name="P:SharpDoc.Model.NProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.HasGetMethod">
            <summary>
            Gets a value indicating whether this instance has get method.
            </summary>
            <value>
            	<c>true</c> if this instance has get method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.HasSetMethod">
            <summary>
            Gets a value indicating whether this instance has set method.
            </summary>
            <value>
            	<c>true</c> if this instance has set method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.GetMethod">
            <summary>
            Gets or sets the get method.
            </summary>
            <value>
            The get method.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.SetMethod">
            <summary>
            Gets or sets the set method.
            </summary>
            <value>
            The set method.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.IsVirtual">
            <summary>
            Gets a value indicating whether this instance is virtual.
            </summary>
            <value>
            	<c>true</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.HasOverrides">
            <summary>
            Gets a value indicating whether this instance has overrides.
            </summary>
            <value>
            	<c>true</c> if this instance has overrides; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.HasImplements">
            <summary>
            Gets a value indicating whether this instance has implements.
            </summary>
            <value>
            	<c>true</c> if this instance has implements; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.Implements">
            <summary>
            Gets or sets the implements.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="P:SharpDoc.Model.NProperty.ValueDescription">
            <summary>
            Gets or sets the value description.
            </summary>
            <value>
            The value description.
            </value>
        </member>
        <member name="T:SharpDoc.Model.NMemberType">
            <summary>
            Type of a member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Interface">
            <summary>
            An Interface member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Class">
            <summary>
            A Class member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Struct">
            <summary>
            A Struct member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Enum">
            <summary>
            An Enum member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Constructor">
            <summary>
            A Constructor member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Method">
            <summary>
            A Method member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Extension">
            <summary>
            An Extension Method member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Operator">
            <summary>
            An operator member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Field">
            <summary>
            A Field member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Property">
            <summary>
            A Property member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Event">
            <summary>
            An Event member.
            </summary>
        </member>
        <member name="F:SharpDoc.Model.NMemberType.Delegate">
            <summary>
            A Delegate member.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NStruct">
            <summary>
            A struct.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NStruct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NStruct"/> class.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.NEnum">
            <summary>
            An enum documentation.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.NEnum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.NEnum"/> class.
            </summary>
        </member>
        <member name="T:SharpDoc.MonoCecilHelper">
            <summary>
            Helper methods for Mono.Cecil.
            </summary>
        </member>
        <member name="T:SharpDoc.Model.ConfigSource">
            <summary>
            Documentation topic store in an external file.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.ConfigSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.ConfigSource"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.Model.ConfigSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.Model.ConfigSource"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="mergeGroup">The merge group.</param>
        </member>
        <member name="P:SharpDoc.Model.ConfigSource.AssemblyPath">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:SharpDoc.Model.ConfigSource.DocumentationPath">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:SharpDoc.Model.ConfigSource.MergeGroup">
            <summary>
            Gets or sets the merge group.
            </summary>
            <value>
            The merge group.
            </value>
        </member>
        <member name="T:SharpDoc.OutputType">
            <summary>
            Output type for documentation.
            </summary>
        </member>
        <member name="F:SharpDoc.OutputType.Default">
            <summary>
            Local/Web site. Generate files suitable for local or a web site.
            </summary>
        </member>
        <member name="F:SharpDoc.OutputType.DocPak">
            <summary>
            DocPak exe. Generate a docpak exe viewer with embedded documentation.
            </summary>
        </member>
        <member name="T:SharpDoc.Program">
            <summary>
            Main program.
            </summary>
        </member>
        <member name="T:SharpDoc.DocIdHelper">
            <summary>
            Helper class to transform a member reference (type, method...etc) to an xml doc Id
            according to http://msdn.microsoft.com/en-us/library/fsbx0t7x.aspx
            </summary>
        </member>
        <member name="M:SharpDoc.DocIdHelper.StripXmlId(System.String)">
            <summary>
            Strips a XML doc id by replacing characters that cannot be used for a filename
            by valid chars for filename.
            Replace: ':' => '_', '.' => '_', '#', '_', '`' => '_', '{' => '-', '}' => '-'
            </summary>
            <param name="xmlId">The XML doc id.</param>
            <returns>A stripped version of the xml doc id suitable to use in filenames</returns>
        </member>
        <member name="M:SharpDoc.DocIdHelper.GetXmlId(Mono.Cecil.MemberReference)">
            <summary>
            Gets a Xml doc identifier for the given member.
            </summary>
            <param name="member">The member.</param>
            <returns>An xml doc id.</returns>
        </member>
        <member name="T:SharpDoc.SharpDocApp">
            <summary>
            SharpDoc application.
            </summary>
        </member>
        <member name="M:SharpDoc.SharpDocApp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.SharpDocApp"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.SharpDocApp.UsageError(System.String,System.Object[])">
            <summary>
            Print usages the error.
            </summary>
            <param name="error">The error.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpDoc.SharpDocApp.ParseArguments(System.String[])">
            <summary>
            Parses the command line arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:SharpDoc.SharpDocApp.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="P:SharpDoc.SharpDocApp.Config">
            <summary>
            Gets or sets the config.
            </summary>
            <value>The config.</value>
        </member>
        <member name="P:SharpDoc.SharpDocApp.StyleManager">
            <summary>
            Gets or sets the style manager.
            </summary>
            <value>The style manager.</value>
        </member>
        <member name="T:SharpDoc.StyleDefinition">
            <summary>
            A defined Style.
            </summary>
        </member>
        <member name="M:SharpDoc.StyleDefinition.Load(System.String)">
            <summary>
            Loads the specified style file.
            </summary>
            <param name="file">The style file.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.StyleDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SharpDoc.StyleDefinition.Name">
            <summary>
            Gets or sets the name of this style.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.BaseStyle">
            <summary>
            Gets or sets the inherited style base if any.
            </summary>
            <value>The style base.</value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.HasBaseStyle">
            <summary>
            Gets a value indicating whether this instance has base style.
            </summary>
            <value>
            	<c>true</c> if this instance has base style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.DirectoryPath">
            <summary>
            Gets or sets the directory path of this style
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.FilePath">
            <summary>
            Gets or sets the directory path of this style
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.Isoverridden">
            <summary>
            Gets or sets a value indicating whether this style is overridden.
            </summary>
            <value>
            	<c>true</c> if this style is overridden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDoc.StyleDefinition.IsRunnable">
            <summary>
            Gets a value indicating whether this particular style instance is runnable.
            </summary>
            <value>
            	<c>true</c> if this instance is runnable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDoc.StyleManager">
            <summary>
            Handles Styles directories.
            </summary>
        </member>
        <member name="F:SharpDoc.StyleManager.DefaultStyleDirectoryName">
            <summary>
            Style directory name
            </summary>
        </member>
        <member name="M:SharpDoc.StyleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.StyleManager"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.StyleManager.AddPath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a list of style paths.
            </summary>
            <param name="pathList">The style path list.</param>
        </member>
        <member name="M:SharpDoc.StyleManager.AddPath(System.String)">
            <summary>
            Adds the path to a style directory.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SharpDoc.StyleManager.Init(SharpDoc.Config)">
            <summary>
            Initialize this instance from the specified config.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:SharpDoc.StyleManager.StyleExist(System.String)">
            <summary>
            Determines whether a style is declared and runnable with the specified style name.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>
            	<c>true</c> if a style is declared and runnable with the specified style name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDoc.StyleManager.WriteAvailaibleStyles(System.IO.TextWriter)">
            <summary>
            Writes the available styles.
            </summary>
        </member>
        <member name="P:SharpDoc.StyleManager.StyleDirectories">
            <summary>
            Gets or sets styles override.
            </summary>
            <value>The styles override.</value>
        </member>
        <member name="P:SharpDoc.StyleManager.AvailableStyles">
            <summary>
            Gets the available styles.
            </summary>
            <value>The available styles.</value>
        </member>
        <member name="T:SharpDoc.TemplateContext">
            <summary>
            Template context used by all templates.
            </summary>
        </member>
        <member name="M:SharpDoc.TemplateContext.#ctor(SharpRazor.Razorizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.TemplateContext"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.TemplateContext.FindLocalReference(System.String)">
            <summary>
            Finds a <see cref="T:SharpDoc.Model.IModelReference"/> from an id.
            </summary>
            <param name="id">The id.</param>
            <returns>
            A registered reference or null if it's an external or invalid reference
            </returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:SharpDoc.TemplateContext.ProcessAssemblies">
            <summary>
            Processes the assemblies.
            </summary>
        </member>
        <member name="M:SharpDoc.TemplateContext.ProcessTopics">
            <summary>
            Processes the topics.
            </summary>
        </member>
        <member name="M:SharpDoc.TemplateContext.FindTopicById(System.String)">
            <summary>
            Finds the topic by id.
            </summary>
            <param name="topicId">The topic id.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.ToUrl(SharpDoc.Model.IModelReference,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Resolve a local element Id (i.e. "T:System.Object") to a URL.
            </summary>
            <param name="reference">The reference.</param>
            <param name="linkName">Name of the link.</param>
            <param name="forceLocal">if set to <c>true</c> [force local].</param>
            <param name="attributes">The attributes.</param>
            <param name="useSelf">if set to <c>true</c> [use self when possible].</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.ToUrl(System.String,System.String,System.Boolean,System.String,SharpDoc.Model.IModelReference,System.Boolean)">
            <summary>
            Resolve a document Id (i.e. "T:System.Object") to an URL.
            </summary>
            <param name="id">The id.</param>
            <param name="linkName">Name of the link.</param>
            <param name="forceLocal">if set to <c>true</c> [force local].</param>
            <param name="attributes">The attributes.</param>
            <param name="localReference">The local reference.</param>
            <param name="useSelf"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.UseStyle(System.String)">
            <summary>
            Uses the style.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.ResolvePath(System.String)">
            <summary>
            Resolves a path from template directories.
            </summary>
            <param name="path">The path.</param>
            <returns>The path to the file or directory</returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.Loadfile(System.String)">
            <summary>
            Resolves and load a file from template directories.
            </summary>
            <param name="file">The file.</param>
            <returns>The content of the file</returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.GetTemplate(System.String,System.String@)">
            <summary>
            Gets the template.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.CopyStyleContent(System.String)">
            <summary>
            Copies the content of the directory from all template directories.
            using inheritance directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:SharpDoc.TemplateContext.CopyLocalContent(System.String,System.String)">
            <summary>
            Copies the content of a local directory to the destination html directory.
            </summary>
            <param name="directoryNameOrFile">Name of the source directory.</param>
            <param name="toDirectory">Name of the destination directory.</param>
        </member>
        <member name="M:SharpDoc.TemplateContext.RegisterTagResolver(System.String,System.String,System.Boolean)">
            <summary>
            Add regular expression for TagExpand function.
            </summary>
            <param name="regexp">The regexp.</param>
            <param name="substitution">The substitution.</param>
            <param name="isOnlyForHtmlContent">if set to <c>true</c> [is only for HTML content].</param>
        </member>
        <member name="M:SharpDoc.TemplateContext.RegisterTagResolver(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Boolean)">
            <summary>
            Add regular expression for RegexExpand function.
            </summary>
            <param name="regexp">The regexp.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="isOnlyForHtmlContent">if set to <c>true</c> [is only for HTML content].</param>
        </member>
        <member name="M:SharpDoc.TemplateContext.TagExpand(System.String,System.Boolean)">
            <summary>
            Perform regular expression expansion.
            </summary>
            <param name="content">The content to replace.</param>
            <param name="isOnlyForHtmlContent">if set to <c>true</c> [is only for HTML content].</param>
            <returns>The content replaced</returns>
        </member>
        <member name="M:SharpDoc.TemplateContext.Parse(System.String)">
            <summary>
            Parses the specified template name.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDoc.TemplateContext.Param">
            <summary>
            Gets the param dynamic properties.
            </summary>
            <value>The param dynamic properties.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Style">
            <summary>
            Gets the style dynamic properties.
            </summary>
            <value>The style dynamic properties.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.StyleManager">
            <summary>
            Gets or sets the style manager.
            </summary>
            <value>The style manager.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Registry">
            <summary>
            Gets or sets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.RootTopic">
            <summary>
            Gets or sets the topics.
            </summary>
            <value>The topics.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.SearchTopic">
            <summary>
            Gets or sets the search topic.
            </summary>
            <value>The search topic.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.ClassLibraryTopic">
            <summary>
            Gets or sets the class library topic.
            </summary>
            <value>
            The class library topic.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Namespaces">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Topic">
            <summary>
            Gets or sets the current topic.
            </summary>
            <value>The current topic.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Assembly">
            <summary>
            Gets or sets the current assembly being processed.
            </summary>
            <value>The current assembly being processed.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Namespace">
            <summary>
            Gets or sets the current namespace being processed.
            </summary>
            <value>The current namespace being processed.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Type">
            <summary>
            Gets or sets the current type being processed.
            </summary>
            <value>The current type being processed.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Member">
            <summary>
            Gets or sets the current member being processed.
            </summary>
            <value>The current member.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.StyleDirectories">
            <summary>
            Gets or sets the style directories.
            </summary>
            <value>The style directories.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.LinkResolver">
            <summary>
            Gets or sets the link resolver.
            </summary>
            <value>The link resolver.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.PageIdFunction">
            <summary>
            Gets or sets the page id function.
            </summary>
            <value>
            The page id function.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.WriteTo">
            <summary>
            Gets or sets the write to function.
            </summary>
            <value>
            The write to function.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.IndexFile">
            <summary>
            Gets or sets the index file.
            </summary>
            <value>
            The index file.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.GetWebDocContent">
            <summary>
            Gets or sets the function that get the content of a page of the extern documentation site.
            </summary>
            <value>
            The function that get the content of a page of the extern documentation site.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.WebDocumentation">
            <summary>
            Gets or sets the web documentation.
            </summary>
            <value>The web documentation.</value>
        </member>
        <member name="P:SharpDoc.TemplateContext.CurrentStyleName">
            <summary>
            Gets or sets the name of the current style.
            </summary>
            <value>
            The name of the current style.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.Config">
            <summary>
            Gets or sets the config.
            </summary>
            <value>
            The config.
            </value>
        </member>
        <member name="P:SharpDoc.TemplateContext.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="T:SharpDoc.PageTemplateDoc">
            <summary>
            Overrides default RazorEngine TemplateBase to provide additional
            methods (Import) and properties (Helpers, Param, Style).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.PageTemplateDoc"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.RegisterHelper(System.String,SharpRazor.PageTemplate,System.Reflection.MethodInfo)">
            <summary>
            Registers the helper.
            </summary>
            <param name="name">The name.</param>
            <param name="template">The template.</param>
            <param name="helperMethod">The helper method.</param>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.Import(System.String)">
            <summary>
            Imports the template with the specified name.
            </summary>
            <param name="name">The template name.</param>
            <returns>
            The result of the template with the specified name.
            </returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.CopyDirectoryContent(System.String)">
            <summary>
            Copies the content of the directory.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.ResolveFile(System.String)">
            <summary>
            Resolves a file from template directories.
            </summary>
            <param name="file">The file.</param>
            <returns>The path to the file</returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.Loadfile(System.String)">
            <summary>
            Resolves and load a file from template directories.
            </summary>
            <param name="file">The file.</param>
            <returns>The content of the file</returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.TagExpand(System.String,System.Boolean)">
            <summary>
            Perform regular expression expansion.
            </summary>
            <param name="content">The content to replace.</param>
            <param name="isOnlyForHtmlContent">if set to <c>true</c> [is only for HTML content].</param>
            <returns>The content replaced</returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.Parse(System.String)">
            <summary>
            Parses the specified template name.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.Escape(System.String)">
            <summary>
            Escapes the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDoc.PageTemplateDoc.EscapeForSyntaxBox(System.String)">
            <summary>
            Escapes the specified content for the Syntax Box (bracket are echaped in &lt; and &gt;) .
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:SharpDoc.PageTemplateDoc.Helpers">
            <summary>
            Gets or sets the helpers.
            </summary>
            <value>The helpers.</value>
        </member>
        <member name="P:SharpDoc.PageTemplateDoc.Param">
            <summary>
            Gets the param dynamic properties.
            </summary>
            <value>The param dynamic properties.</value>
        </member>
        <member name="P:SharpDoc.PageTemplateDoc.Style">
            <summary>
            Gets the style dynamic properties.
            </summary>
            <value>The style dynamic properties.</value>
        </member>
        <member name="T:SharpDoc.LinkDescriptor">
            <summary>
            Describes a URL corresponding to a <see cref="T:SharpDoc.Model.IModelReference"/>.
            </summary>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Id">
            <summary>
            Gets or sets the id linked.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.PageId">
            <summary>
            Gets or sets the id linked.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.LocalReference">
            <summary>
            Gets or sets the local reference.
            </summary>
            <value>The local reference.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Type">
            <summary>
            Gets or sets the type of link.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:SharpDoc.LinkDescriptor.Attributes">
            <summary>
            Gets or sets the attributes to add to the a href tag.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="T:SharpDoc.TextReferenceUtility">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpDoc.TopicBuilder">
            <summary>
            Build topics from assemblies and config topic.
            </summary>
        </member>
        <member name="M:SharpDoc.TopicBuilder.Run(SharpDoc.Config,System.Func{SharpDoc.Model.IModelReference,System.String})">
            <summary>
            Build topics for Assemblies, Namespaces and Types in order to use them in the TOC
            </summary>
        </member>
        <member name="P:SharpDoc.TopicBuilder.Namespaces">
            <summary>
            Gets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:SharpDoc.TopicBuilder.Registry">
            <summary>
            Gets or sets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:SharpDoc.TopicBuilder.RootTopic">
            <summary>
            Gets or sets the root topic.
            </summary>
            <value>The root topic.</value>
        </member>
        <member name="P:SharpDoc.TopicBuilder.ClassLibraryTopic">
            <summary>
            Gets the class library topic.
            </summary>
        </member>
        <member name="P:SharpDoc.TopicBuilder.SearchTopic">
            <summary>
            Gets or sets the search topic.
            </summary>
            <value>The search topic.</value>
        </member>
        <member name="T:SharpDoc.DocItem">
            <summary>
            Documentation item
            </summary>
        </member>
        <member name="P:SharpDoc.DocItem.Id">
            <summary>
            Gets or sets the short id.
            </summary>
            <value>
            The short id.
            </value>
        </member>
        <member name="P:SharpDoc.DocItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SharpDoc.DocItem.Remarks">
            <summary>
            Gets or sets the remarks.
            </summary>
            <value>The remarks.</value>
        </member>
        <member name="P:SharpDoc.DocItem.Return">
            <summary>
            Gets or sets the return.
            </summary>
            <value>The return.</value>
        </member>
        <member name="P:SharpDoc.DocItem.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:SharpDoc.DocProvider">
            <summary>
            A DocProvider is responsible to provide documentation to the Parser
            in order to feed each C++ element with an associated documentation.
            This is optional.
            A client of Parser API could provide a documentation provider
            in an external assembly.
            </summary>
        </member>
        <member name="M:SharpDoc.DocProvider.Begin">
            <summary>
            Begins the process of the documentation provider
            </summary>
        </member>
        <member name="M:SharpDoc.DocProvider.FindDocumentation(System.String)">
            <summary>
            Finds the documentation for a particular C++ item.
            </summary>
            <param name="fullName">The full name. for top level elements (like struct, interfaces, enums, functions), It's the name itself of the element. For interface methods, the name is passed like this "IMyInterface::MyMethod".</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDoc.DocProvider.End" -->
        <member name="M:SharpDoc.Utility.EscapeHtml(System.String)">
            <summary>
            Escapes the xml/html text in order to use it inside xml.
            </summary>
            <param name="stringToEscape">The string to escape.</param>
            <returns></returns>
        </member>
        <member name="F:SharpDoc.Utility.RegexInvalidPathChars">
            <summary>
            Regular expression to match invalid chars in filename
            </summary>
        </member>
        <member name="M:SharpDoc.Utility.IsValidFilename(System.String)">
            <summary>
            Determines whether the specified file name is a valid filename.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>
            	<c>true</c> if the specified file name is a valid filename; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SharpDoc.MsdnRegistry">
            <summary>
            Client to MTPS service.
            </summary>
        </member>
        <member name="M:SharpDoc.MsdnRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDoc.MsdnRegistry"/> class.
            </summary>
        </member>
        <member name="M:SharpDoc.MsdnRegistry.FindUrl(System.String)">
            <summary>
            Finds a URL from MSDN documentation.
            </summary>
            <param name="assetId">The asset id in the form "T:System.String"</param>
            <returns>A URL to MSDN or null if no URL was found</returns>
        </member>
        <member name="M:SharpDoc.MsdnRegistry.LoadCacheFromDisk">
            <summary>
            Loads the cache.
            </summary>
        </member>
        <member name="M:SharpDoc.MsdnRegistry.SaveCacheToDisk">
            <summary>
            Writes the cache.
            </summary>
        </member>
        <member name="P:SharpDoc.MsdnRegistry.Locale">
            <summary>
            Gets or sets the locale.
            </summary>
            <value>The locale.</value>
        </member>
        <member name="P:SharpDoc.MsdnRegistry.AppId">
            <summary>
            Gets or sets the app id.
            </summary>
            <value>The app id.</value>
        </member>
        <member name="P:SharpDoc.MsdnRegistry.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this instance is disabled.
            </summary>
            <value>
            	<c>true</c> if this instance is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDoc.MTPS.mtpsFaultDetailType">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.mtpsFaultDetailType.eventId">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.mtpsFaultDetailType.source">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.mtpsFaultDetailType.helpLink">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.availableVersionAndLocale">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.availableVersionAndLocale.locale">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.availableVersionAndLocale.version">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.requestedDocument">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.requestedDocument.selector">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.requestedDocument.type">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.documentTypes">
            <remarks/>
        </member>
        <member name="F:SharpDoc.MTPS.documentTypes.primary">
            <remarks/>
        </member>
        <member name="F:SharpDoc.MTPS.documentTypes.common">
            <remarks/>
        </member>
        <member name="F:SharpDoc.MTPS.documentTypes.image">
            <remarks/>
        </member>
        <member name="F:SharpDoc.MTPS.documentTypes.feature">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.primary">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.primary.Any">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.primary.primaryFormat">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.primary.location">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.image">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.image.name">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.image.imageFormat">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.image.location">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.image.Value">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.common">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.common.Any">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.common.commonFormat">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.common.location">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.feature">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.feature.Any">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.feature.featureFormat">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.feature.location">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.appId">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.appId.value">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.getContentRequest">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentRequest.contentIdentifier">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentRequest.locale">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentRequest.version">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentRequest.requestedDocuments">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.getContentResponse">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.contentId">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.contentGuid">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.contentAlias">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.locale">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.version">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.availableVersionsAndLocales">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.primaryDocuments">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.imageDocuments">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.commonDocuments">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getContentResponse.featureDocuments">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.getNavigationPathsRequest">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getNavigationPathsRequest.root">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getNavigationPathsRequest.target">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.navigationKey">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationKey.contentId">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationKey.locale">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationKey.version">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.getNavigationPathsResponse">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.getNavigationPathsResponse.navigationPaths">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.navigationPath">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPath.navigationPathNodes">
            <remarks/>
        </member>
        <member name="T:SharpDoc.MTPS.navigationPathNode">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPathNode.title">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPathNode.isPhantom">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPathNode.isPhantomSpecified">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPathNode.navigationNodeKey">
            <remarks/>
        </member>
        <member name="P:SharpDoc.MTPS.navigationPathNode.contentNodeKey">
            <remarks/>
        </member>
        <member name="P:SharpDoc.WebDocumentation.FormatCredential">
            <summary>
            Gets or sets the function that format credential for the extern documentation site authentification.
            </summary>
            <value>
            The function that format credential for the extern documentation site authentification.
            </value>
        </member>
    </members>
</doc>
